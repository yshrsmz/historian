apply plugin: 'com.android.library'
apply plugin: 'jacoco'

apply from: '../gradle/dependencies.gradle'

// CI
def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion 30

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 30
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

  }
  buildTypes {
    debug {
      testCoverageEnabled true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  dexOptions {
    // Skip pre-dexing when running on CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isCi
  }

  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }

  buildFeatures {
    buildConfig = false
  }
}

dependencies {
  implementation deps.appcompat

  testImplementation deps.junit
  testImplementation deps.robolectric
  testCompileOnly deps.autoService.annotation
  testAnnotationProcessor deps.autoService.compiler
}

//publish {
//  artifactId = 'historian-core'
//  desc = "a simple logger which saves logs to SQLite, to get better understanding of user's environment"
//
//  def metadata = project.rootProject.ext.metadata
//  groupId = metadata.groupId
//  publishVersion = metadata.version
//  website = metadata.website
//  repository = metadata.repository
//  licences = metadata.licences
//}

// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*']

jacoco {
  toolVersion = "0.8.6"
}

// https://issuetracker.google.com/issues/178015739
tasks.withType(Test.class).configureEach {
  jacoco {
    excludes = ['*']
    includeNoLocationClasses = true
  }
}

task jacocoTestReportDebug(
    type: JacocoReport,
    dependsOn: ['testDebugUnitTest'],
    group: 'verification'
) {
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled = true
    html.enabled = true
    csv.enabled = false
  }
  getSourceDirectories().from = files(coverageSourceDirs)
  getClassDirectories().from = files(
      fileTree(
          dir: "${buildDir}/intermediates/javac/debug/classes",
          exclude: coverageExcludeFiles))
  getExecutionData().from = files("${buildDir}/jacoco/testDebugUnitTest.exec")

  doLast {
    println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReportDebug.xml"
    println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
  }
}
