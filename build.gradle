// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: project.file("gradle/version/version.gradle")
apply from: project.file("gradle/metadata.gradle")

apply plugin: 'com.github.ben-manes.versions'

buildscript {
  repositories {
    mavenCentral()
    google()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.2'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.36.0'
  }
}

allprojects {
  repositories {
    mavenCentral()
    google()
    jcenter()
  }
}

ext {
  metadata.version = ext.versionName()
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

String shell(String command) {
  def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
  if (proc.waitFor() != 0) {
    throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
  } else {
    def err = proc.err.text
    if (err) {
      System.err.println(err)
    }
  }
  return proc.in.text;
}

task releng {
  doLast {
    def tag = "v" + versionName()
    println "Release engineering for ${tag}"

    def changes = shell "git status -s"
    if (changes.trim()) {
      throw new RuntimeException("There are changes not commited yet.\n${changes}")
    }

    println "> git tag ${tag}"
    shell "git tag ${tag}"
    println "> git push origin ${tag}"
    shell "git push origin ${tag}"
    shell "git push origin master"
  }
}

wrapper {
  gradleVersion = '6.8.3'
  //noinspection UnnecessaryQualifiedReference
  distributionType = Wrapper.DistributionType.ALL
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  // Example 1: reject all non stable versions
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}
